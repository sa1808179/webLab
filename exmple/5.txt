Task 5: Create Client-Side Page to Display Vehicles and Violations

Step 1: Create app/page.jsx

In your Next.js project, create a file at app/page.jsx with the following content:

üìÑ File: app/page.jsx

'use client'; // Indicates this is a client-side component in Next.js

import { useEffect, useState } from 'react'; // Import React hooks

export default function HomePage() {
  // Initialize state to hold the list of vehicles
  const [vehicles, setVehicles] = useState([]);

  // Initialize state to track loading status
  const [loading, setLoading] = useState(true);

  // useEffect hook to fetch data when the component mounts
  useEffect(() => {
    // Fetch data from the API endpoint
    fetch('/api/vehicles')
      .then((res) => res.json()) // Parse the JSON response
      .then((data) => {
        setVehicles(data); // Update the vehicles state with fetched data
        setLoading(false); // Set loading to false after data is fetched
      })
      .catch((error) => {
        console.error('Error fetching vehicles:', error); // Log any errors
        setLoading(false); // Set loading to false even if there's an error
      });
  }, []); // Empty dependency array ensures this runs once on mount

  // If data is still loading, display a loading message
  if (loading) return <p>Loading vehicles...</p>;

  // Render the list of vehicles and their violations
  return (
    <div>
      <h1>Vehicle Violations</h1>
      {vehicles.map((vehicle) => (
        <div
          key={vehicle.id}
          style={{
            border: '1px solid #ccc',
            margin: '1em 0',
            padding: '1em',
          }}
        >
          {/* Display vehicle plate and owner */}
          <h2>
            {vehicle.plate} - {vehicle.owner}
          </h2>
          <h3>Violations:</h3>
          <ul>
            {/* Sort violations by date and display each one */}
            {vehicle.violations
              .sort((a, b) => new Date(a.date) - new Date(b.date))
              .map((violation) => (
                <li key={violation.id}>
                  {/* Display violation date, category, and paid status */}
                  {violation.date}: {violation.category} -{' '}
                  {violation.paid ? 'Paid' : 'Unpaid'}
                </li>
              ))}
          </ul>
        </div>
      ))}
    </div>
  );
}
üìù Explanation:
State Management (useState): We use useState to manage the list of vehicles and the loading state. This allows the component to re-render when the data changes.
Data Fetching (useEffect): The useEffect hook is used to fetch data from the API when the component mounts. The empty dependency array [] ensures this effect runs only once.
Rendering the List: We map over the vehicles array to display each vehicle's information. For each vehicle, we also map over its violations array, sorting the violations by date before displaying them.
Conditional Rendering: We display a loading message while the data is being fetched. Once the data is loaded, we display the list of vehicles and their violations.
