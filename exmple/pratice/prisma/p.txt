‚úÖ STEP 1: Set Up the Project

1. Create a new Next.js app:
npx create-next-app@latest final --app




2. Initialize Prisma and SQLite
npm install prisma @prisma/client
npx prisma init


In .env, add this:

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


‚úÖ STEP 2: Define Your Database Schema

In prisma/schema.prisma, paste this:

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id         String      @id @default(cuid())
  plate      String      @unique
  owner      String
  violations Violation[]
}

model Violation {
  id        String   @id @default(cuid())
  category  String
  date      DateTime
  paid      Boolean  @default(false)
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
}
Then run:

npx prisma migrate dev --name init
npx prisma generate


‚úÖ STEP 3: Create Repositories

In a new folder repos/, create:

prisma.js:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
export default prisma
vehicles.js:
import prisma from './prisma'

export async function getVehicles() {
  return await prisma.vehicle.findMany({ include: { violations: true } })
}

export async function createVehicle(data) {
  return await prisma.vehicle.create({ data })
}
violations.js:
import prisma from './prisma'

export async function addViolation(vehicleId, data) {
  return await prisma.violation.create({
    data: {
      ...data,
      vehicleId,
      date: new Date(data.date),
    },
  })
}



create a touch prisma/seed.js
to fill out the data 
‚úçÔ∏è 2. Paste This Code Inside seed.js
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Create a vehicle with one violation
  const vehicle = await prisma.vehicle.create({
    data: {
      plate: "QTR123",
      owner: "Saja Abdelmalik",
      violations: {
        create: [
          {
            category: "Speeding",
            date: new Date("2025-05-01"),
            paid: false,
          },
          {
            category: "Red Light",
            date: new Date("2025-05-03"),
            paid: true,
          },
        ],
      },
    },
  })

  console.log("üöó Seeded vehicle with violations:", vehicle)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
  
‚öôÔ∏è 3. Add This Script to package.json
In your package.json, add under "scripts":

"seed": "node prisma/seed.js"
‚ñ∂Ô∏è 4. Run the Seed Script
Now run it in the terminal:

npm run seed
‚úÖ 5. Check Prisma Studio
Run:

npx prisma studio
Open http://localhost:5555 and now you should see:

Vehicle table with 1 entry
Violation table with 2 entries linked to the vehicle 


‚úÖ STEP 4: Set Up Your API Routes

Create folders like this:

app/api/vehicles/route.js
app/api/vehicles/[id]/violations/route.js
app/api/vehicles/[id]/violations/[vid]/route.js
Example: app/api/vehicles/route.js:

import { getVehicles, createVehicle } from '@/repos/vehicles'

export async function GET() {
  const data = await getVehicles()
  return Response.json(data)
}

export async function POST(request) {
  const body = await request.json()
  const newVehicle = await createVehicle(body)
  return Response.json(newVehicle, { status: 201 })
}
‚úÖ STEP 5: Build the Client UI

In app/page.jsx:

Use useState + useEffect to fetch data
Render list of vehicles and violations
Add forms for creating vehicles/violations
Add buttons for "pay" and "delete"
‚úÖ STEP 6: Run the Project

npm run dev
Visit:

http://localhost:3000
‚úÖ STEP 7: Test in Postman

Use:

GET http://localhost:3000/api/vehicles
POST to create vehicles or violations
PATCH to mark as paid
DELETE to remove violations
Export the collection to postman.json.

‚úÖ STEP 8: Submit

Take screenshots of the working page.
Put them in a results/ or screenshots/ folder.
Push the full project with:
app/
repos/
prisma/schema.prisma
results/postman.json
readme.md with your name and tasks.
